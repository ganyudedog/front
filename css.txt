css初始化文件一般叫base.css,公共样式文件一般叫common.css 。

css主要使用途径就是美化网页布局页面的。

css也是一门标记语言,是一门非程序式语言,没有变量,函数,作用域等概念!
所以它具有弊端:
1.需要书写大量看似没有逻辑的代码,冗余度高。
2.不方便维护和发展,不利于复用。
3.没有很好的计算能力。
4.非前端工程师很难写出组织良好且易于维护的css代码。

css规则由两个主要部分构成:选择器(选择修改谁)以及一条或多条声明(怎么改).
css一般写在<head></head>中的<style></style>中.
属性和属性值之间用:隔开,语句之间用;隔开
写键值对时在:后面保留一个空格，这样写比较规范。
选择器和大括号之间也保留一个空格，使之规范。

选择器分为两个大类:基础选择器和复合选择器。
基础选择器由单个选择器构成，包括
1.标签选择器 2.类选择器 3.id选择器 4.通配符选择器
标签选择器指用标签名作为选择器, 选择一大类进行更改，缺点是不能差异化设置。

类选择器则可以实现差异化选择.开发最常用！！！
语法规范: .类别{加上修改}。然后再需要修改的标签中加上class="类别"
不要使用纯数字中文等命名。
字体颜色用color,背景颜色用background-color。
当使用多个类名的时候只需要用空格隔开就可以了，即class可以使用多个类名!!!。
类可以被多次调用。
可以把相同的改动放在一起，从而减少代码量.
类的命名一般要精短明确,单词之间统一使用 _ 连接
不用不和谐字眼和有关广告的字眼。

id选择器的语法规范:#id名{加上修改},id名为自定义。
id选择器只能调用一次，id选择器一般用于页面唯一性的元素上
常和js搭配使用。

通配符选择器使用*定义，表示选取页面中的所有标签(全部,包括<html></html>)

字体的设置用font-family来表示，可以写中文,且单引号双引号都可以用来包括.
尽量使用系统自带的字体，否则可能不会显示.
且可以在font-family中写多个字体若第一个用户系统中没有，则从左至右
依次尝试，若都不行，则使用浏览器默认字体。
多个字体用,隔开。
一个单词的字体不需要引号进行包括，大于一个的则需要，中文则一定要。
一般放在<body></body>里面。这样基本可以修改网页中的所有字体。
font-size可以修改字体大小。
标题标签比较特殊，需要特殊指定更改。

css通过font-weight属性来设置文字粗细。
font-weight可以使用数字来设置文字粗细，不加单位，normal为400,bold为700
同时也实际开发推荐使用这种。

font-style用于设置文本风格,其中italic表示斜体。

字体的复合属性即是多个字体设置的简写形式，其对顺序有严格的要求。
font: font-style font-weight font-size/line-height font-family;
依次设定值即可，属性值用空格隔开,line-weight可不写，若写/需保留
顺序不能改变！！！否则就无效。
注意不需要的属性可以省略,但必须保留font-size,font-family
否则将不起作用。

颜色有三种表示方式,一种为英语单词，一种为#+六个16进制数，
还有一种是rgb代码，如rgb(255,0,0)

text-align用于设置元素类文本对齐的方式left,center,right

text-decoration用于规定添加到文本的修饰
none表示无(默认)，underline表示下划线,overline表示上划线,line-through表示删除线
<a></a>中的内容自带下划线。

text-indent用来指定文本第一行的缩进，通常用于将段落的首行进行缩进。
单位为px,可以写负数，表示向右缩进。
单位也可使用em，em是一个相对单位,即当前文字一个的大小。

line-height为行间距用于设置行高,其值不能为百分比。
若数值无单位,则为当前字体的大小乘该数值即为行高。

css有三种引入方式:
1.内部样式表(即写到html页面内部,放到<style></style>标签中)
<style></style>可以放到html的任何地方,但一般放在<head></head>中。
通过这种方式，可以控制整个页面，但缺点是并没有完全分离。
一般在练习中使用。
2.行内样式表(即在标签类部的style属性中设定css样式)
适合于修改简单样式。
注意:style本来就是标签的属性之一。
3.外部样式表(开发最常用！！！)
即将样式单独写到css文件中。
在css文件中只用写样式，不用标签。
这样可以控制多个页面！！！

给图片加居中对齐没有效果。

emmet语法可以加快html,css的编写速度。
如创建10个<div></div>标签，只需输入div*10即可。
又如创建有包含关系的标签,只需写标签>被包含的标签,选择第一个即可。
创建具有并列关系的标签,只需写标签+标签,选择第一个即可。
使标签归属于一个类或id,只需输入标签.类/标签#id 选择第一个即可。
$*几,可以使内容按数字顺序进行排序。
在标签里面直接写内容,只需写标签{写上需要的内容}选择第一个即可。

css也可以这样:
如text-align: center;只需写tac(会自动生成) 选择第一个即可。

复合选择器是建立于基础选择器之上的！
复合选择器:
1.后代选择器(重要!)
如只更改<ol></ol>中的<li></li>,只需写ol li {修改内容}即可。
标签必须是包含关系,只要包含在第一个标签里面即可,可以是多层。
类选择器也可以使用,如需修改类里面的标签时
只需写.类+需修改的后代即可
语法规范:元素1 元素2 {};元素1,元素2可以是任何选择器。

2.子选择器(也叫做亲儿子选择器)
语法规范:元素1>元素2;这个只会选出亲儿子,即只能是元素1所包含的。

3.并集选择器(重要!)
其可以选择多组标签并为他们定义相同的样式。
语法规范:元素1,元素2,...{修改内容}
任何选择器都可以作为并集选择器的元素。
最后一个元素后面不加,！

4.伪类选择器
这个选择器用于想某些选择器添加特殊的效果。
语法规范: : 见下文  (前面可以是任意选择器)
(1)链接伪类选择器
a:link 选择所有未被访问(不在历史记录的)的链接;
a:visited 选择所有已被访问(在历史记录的)的链接;
a:hover 选择鼠标经过的链接;
a:active 选择活动链接(鼠标按下且并未松开使链接未弹起的)
这种选择器的注意事项:
1.为确保生效,按顺序写link;visited;hover;active;(必须如此!否则将不起作用)
2.链接指定样式需单独制定。
在开发中hover最常用。

对于hover时添加边框出现的抖动问题,本质上是边框撑大了盒子,只需给盒子添加一个透明的等大边框即可。

(2)focus伪类选择器
一般用于选取获得光标的表单元素,该选择器主要针对<input>。
语法规范:input:focus{修改内容};

选择器写的越详细越好,方便后期更改。

css3新增选择器:
1.属性选择器:根据元素的特定属性来选择元素。
语法规范: 任意选择器[属性] {修改}
如只修改input中有value的,则为input[value] {修改}
如只修改input中type为passward的,则为input[type=password](重点)
只修改属性以att开头的,标签[属性^=att]
只修改属性以att结尾的,标签[属性$=att]
只修改属性含有att的,标签[属性*=att]
权重为 0,0,1,0(还要加上前面的选择器权重)

2.结构伪类选择器:根据文档结构来选择元素,即根据父级选择器来选择里面的子元素。(常用,可减少类的使用)
语法规范: 任意选择器 : first-child(第一个)/last-child(最后一个)/nth-child(n)(第n个或多个){修改}
注意: 最后一个中的n可以是数字(选择第几个),关键字,公式。
关键字可以是evem(偶数),odd(奇数)。
公式: 2n(偶数),2n+1(奇数)...
必须含n,n从0开始加1递增,n前面可加负号。
将child改为type也可以。first-of-type(第一个),其他同理。

但type和child有区别:
child会把所有的盒子排列成序号,在执行时会先根据nth-child,在看前面的选择器是否与选择的匹配。
而type会先看前面的选择器。

权重为 0,0,1,0(还要加上前面的选择器权重)

3.伪元素选择器:可以利用css创建新标签元素,从而不需要html标签,
选择器::before{样式} 在元素内部的前面插入内容(内左,永远在盒子前方)
选择器::after{样式} 在元素内部的后面插入内容(内右,永远在盒子后方)

这两个选择器创建的元素为行内元素,在文档中无法找到,非真正意义上的元素,故称伪元素。
注意:before和after必须有content(内容)属性。
若想伪元素在鼠标悬浮时有变化,写法为选择器:hover::before{修改}(before修改为after也可以)

权重为0,0,0,1


元素显示模式就是元素(标签)以什么方式进行显示,如<div>占一行,
但一行可以有多个<span>。
由此可得,html元素一般分为块元素(自占一行)和行内元素两种类型。
块元素:<h1>-<h6>,<p>,<div>,<ul>等
特点:1.自占一行。
     2.高,宽,外边距,内边距可控。
     3.宽度默认为容器(包含该块元素的)的100% 。
     4.是一个容器,里面可以放块元素,行内元素。
注意事项:1.文字类的元素内不能使用块元素。
        2.<p>内主要用于存放文字,故<p>里面不能放块元素,尤其是<div> 
        3.<h1>-<h6>同理。

行内元素:<a>,<del>,<span>等
特点:1.相邻的行内元素在一行上,一行可以显示多个,碰到父元素边界自动换行。
     2.高,宽直接设置是无效的。
     3.默认宽度就是它本身的宽度。
     4.行内元素只能容纳文本以及其他行内元素,不能放块元素。
注意事项:1.<a>里面不能再放<a>。
        2.<a>里面可以放块元素,但给<a>转化为块级模式最安全。
   
行内块元素:<img/>,<input/>,<td>等
特点:1.一行可以显示多个,之间会有空白缝隙。
     2.默认宽度就是它本身的宽度。
     3.高度,宽的,内外边距可控。

元素显示模式的转换(常用!!!)
可理解为一种模式的元素转换为另一种模式的元素。
转换成块元素:display:block;(写在style中)
转换成行内元素:display: inline;(写在style中)
转换成行内块元素:display: inline-block;(写在style中)
display: table;的意思则是转化为块级元素并一行显示。

一般来说,a如果包含有宽度的盒子,a需要转换成块级元素(最安全的做法)。

若想让文字垂直居中,只需要将文字的行高和容器的高度相等(竖直),然后将
text-align修改为center(水平)即可(但在css3的新盒子模型中,行高需减去边框和内边距,这样才能使文字垂直居中)。

在背景颜色中,transparent表示透明(为默认),
在新的css中还有半透明的方式。
半透明黑色写法:background: rgba(0,0,0,0.3)
a也就是最后一个为alpha,即透明度取值在0-1之间。
在开发中alpha的0可省略即 .3 也可以,但只有IE9以上的浏览器支持,
但实际开发中不关心这个的兼容性了。

在css3中,背景颜色可以使用渐变色(背景渐变)。
渐变色可以分为线性渐变,径向渐变等
线性渐变色语法规范: background: linear-gradient(起始方向,颜色1,颜色2,...);
起始方向表示从哪边开始,可以为方位名词(可以写多个,如左上即为 top left) 或者 度数,如果省略则默认为top。
注意:这个兼容性极差,必须添加浏览器的私有前缀(在linear前面加)。

background-image背景图片的优点是易于控制位置,用于装饰网页。
语法规范:url(路径)

background-repeat背景平铺通过background-repeat修改。
属性有repeat,no-repeat,repeat-x(在横轴上平铺),repeat-y(在纵轴上平铺)。
默认是平铺的。
背景图片和背景颜色可以共存,但背景图片在上端。

background-position表示背景图片的位置,有两个参数可以更改,
且有两种方式表达:方位名词和精确单位。
1.若两个参数均为方位名词,前后顺序无关。若只指定了一个方位,则另一个默认
居中显示。
2.若两个参数均为精确单位,则第一个为水平坐标,第二个为竖直坐标。
同样,若只指定一个数值,则必为为水平坐标,另一个默认居中显示。
3.若两个参数一个是方位名词,一个是精确单位,则第一个为水平坐标,第二个
为竖直坐标(注意)

背景图像固定(背景附着)background-attachment可设置背景图像是否固定
或者随着页面滚动而滚动。
后期常做视差滚动的效果。
取值唯二:scroll(滚动)||fixed(固定)
默认为滚动。

background-size可以修改背景图片的大小,第一个值为宽度,第二个为高度,
若只写一个,则另一个按比例缩放。
注意:background-size是整体缩放,故不能适用于精灵图。
语法规范:background-size: 数值 数值;
数值可以为还可以为cover(覆盖,完全覆盖,并等比缩放,可能显示不全),contain(等比缩放到宽度和高度只少一个先达到父盒子的程度即结束,可能会有空白)
数值单位可以为百分比(相对于父盒子来说)。

同理,背景的属性也有复合写法。
但它没有固定的顺序,但一般的写法为
background: 背景颜色 背景图片 背景平铺 背景图像滚动 背景图片位置;

css有三个非常重要的特性:层叠性,继承性,优先性。
1.层叠性:相同选择器设置相同的样式,此时一个样式就会覆盖(层叠)另一个
样式,层叠性就是解决这样的问题。
若样式冲突,遵循就近原则。若样式不冲突,则不会发生。 
2.继承性:子标签会继承父标签中的一些(并非所有)样式。
注意:主要继承的是一些有关文字类的样式(text-,font-,line-以及color
还有宽度,高度),有的时候,文字不出现或者位置不对可能就是因为行高的继承问题。
具体看情况解决,注意:行高也会撑大盒子。
行高也会继承!!!行高可跟单位也可以不跟单位。
若不跟单位,则为文字大小的所填数字的倍数(牢记)。
不写单位的最大优势就是里面的子元素可以根据自己文字大小调整行高。
相对灵活。
3.优先级:当有多个选择器修改标签时,谁优先修改。
选择器相同,则为层叠性;反之,则为优先性,根据选择器的权重执行。

继承性!!! 或 * 权重为0,0,0,0
元素选择器0,0,0,1
类选择器,伪类选择器 0,0,1,0
id选择器 0,1,0,0
标签中的style属性 1,0,0,0

!important 无穷大(使用方法:在样式后面加上!important声明即可,是在分号的前面)
如width: 10px !important;

权重由四组数字组成,但不会进位!!!
从左到右依次比较
复合选择器就会出现权重叠加的问题

浏览器单独给<a></a>指定了一个样式,为类选择器。

网页布局的三大核心:盒子模型,浮动,定位。
网页元素其实就是由一个个盒子组成的。
网页布局的核心本质就是利用css摆盒子。
css盒子模型包括边框,外边距,内边距和实际内容。
border为盒子的边框,content为内容,padding为内边距(即文字和盒子边框的距离)
margin为外边距(即盒子之间的距离)

border由三部分组成:边框粗细(border-width),边框样式(border-style),
边框颜色(border-color)。

border-width一般用px作为单位。
border-style常用的为:solid(实线),dashed(虚线),dotted(点线)
边框也有复合写法,无顺序要求,但一般按width,style,color的顺序写。
边框的样式可以分开修改:top(上),left(左),right(右),bottom(下)

border-collapse属性控制相邻单元格的边框合并的问题。
只需写border-collapse: collapse;即可解决单元格边框合并导致边框变粗的问题。
注意:边框会影响盒子的大小

padding为内边距,即边框和内容的距离
内边距也有复合写法,但表达的意思和写的值有关。
1个:上下左右; 2个:上下 左右; 3个:上 左右 下; 4个:上 右 下 左 顺时针方向
注意:padding也会影响盒子大小。
实际开发中,通过设置padding值来撑开装了不同内容的盒子,使之盒子大小相等。

对于子盒子再父盒子中的移动,也可以给父盒子指定一个padding值。
若没有给盒子指定width,height,则padding不会撑开盒子。
备注:指定高度padding会往上下撑开,指定宽度则会往左右。

但在css3中,可以通过box-sizing来指定盒子模型,共有两个值,content-box和border-box。
1.content-box(为默认):盒子大小为传统。
2.border-box:盒子大小只和width有关(盒子不会被撑大)。

margin为外边距，即盒子和盒子的距离。
margin也有简写方式,规则和padding相同。

外边距可以让块级盒子水平居中,但有两个条件:
1.盒子必须指定宽度。
2.盒子的左右边框设置为auto。
这种做法只对块级盒子生效,对行内和行内块元素不生效,对脱标的元素也不生效。

行内和行内块元素水平居中只需给其父元素添加一个
text-align: center; 即可。

对于两个嵌套关系的块元素,父元素有上外边距的同时子元素也有上外边距,
此时父元素会执行最大的上外边距(无法避免),称之为外边距合并。
解决方案:
1.为父元素定义上边框。
2.为父元素定义上内边距。
3.为父元素添加overflow: hidden; 。
如果盒子有浮动,固定,绝对定位则不会出现这个问题。

对于多数网页元素,浏览器有其默认的内外边距,且不同浏览器默认的不一致,
所以在布局前,首先要清除网页元素的内外边距。
使用通配符选择器margin: 0;padding: 0;
使得可以开始布局。

注意:为了照顾兼容性,行内元素尽量只设置左右内外边距,不设置上下,但转化
一下就可以了。

网页美工大部分效果都是利用ps(photoshop)来做的,所以大部分切图工作都在ps
里面完成。

总结:标签都是有语意的,合理的地方用合适的标签,比如产品标题使用h,
大量文字段就用p。
尽量多用类选择器,这样可以更好的找到相应的盒子,后期维护也方便。

大部分时候margin和padding可以混用,两者各有优缺点,根据实际情况使用!!!!

去掉列表前面的项目符号,可以在css中写上
list-style: none;即可去除<li></li>前的项目符号,无序列表中的小圆点。

备注:以下三个只有在IE9及以上的浏览器中才有效。
1.圆角边框(重要!!!)
语法规范:border-radius:加上修改;单位为px。
注意:这样的书写为简写,实际可以写四个值,分别为左上,右上,右下,左下。
为顺时针方向。一些不规则图形就是一些设置圆角边框,一些不设置形成的。
也可以只改一个角,但先上下后左右。
使得边框变成圆角,可为参数可为数值也可为百分比的形式。
若想将边框设置为圆形,则可将半径设置为正方形的盒子边长的一半。
同理,若为椭圆,则将半径设置为长或宽其中一个的一半。

2.盒子阴影(重要!!!)
语法规范: box-shadow: h-shadow v-shadow blur spread color inset;
h-shadow:必须,水平阴影的位置,正为向右,允许为负。
v-shadow:必须,水平阴影的位置,正为向下,允许为负。
blur:选择,模糊距离,即影子的虚实。
spread:选择,阴影尺寸,可为负数。
color:选择,阴影颜色。
inset:选择,将外部阴影(outset)改为内部。
注意outset不可以直接写在里面,否则将不起作用。
盒子阴影不占用空间,不会影响其他盒子的排列。

3.文字阴影
语法规范: text-shadow: h-shadow v-shadow blur color;
需要使文字具有一定的立体感时可用。
同上。实际开发中使用不多。 


第二:浮动
传统网页布局(PC端)的三种方式:普通流,浮动,定位。
标准流:标签按照 规定好的方式默认排列,即最基础的。
完整的网页使用三种方式一起构成。
浮动可以改变元素标签默认的排列方式

网页布局第一准则:多个块级元素纵向排列找标准流,多个块级元素横向排列找浮动。
网页布局第二准则:先设置盒子大小,再设置盒子位置。

float属性用于创建浮动框,将其移动到一边,直到左边缘或者右边缘触及
包含块或另一个浮动框的边缘。
语法规范: float: 属性值;
属性值共三个:none(默认),left,right
如给两个盒子添加左浮动,他们会排列在左边的同时并在一起。
因为第二个盒子会碰到上一个盒子的边缘,浮动的盒子之间没有缝隙。

因为加了浮动之后的元素,会具有许多的特性。
浮动特性(重要!!!)
1.浮动的元素会脱离标准流。
(1)脱离标准流(浮)并移动到指定位置(动)。
(2)浮动的盒子不在保留原先的位置,且不占用标准流的位置。
(3)浮动的元素位于标准流之上。但它只会压住下面标准流盒子,却不会压住下面标准流
盒子里面的文字和图片。

而浮动之所以不会压住文字和图片,是因为浮动最初的目的是为了做文字围绕效果的,文字会围绕浮动元素。

2.浮动的元素会一行内显示并且元素顶部对齐(重点!!!)。
当屏幕过小时无法在当前行排列时会自动跳转到下一行显示。
对于这种情况,可以将父盒子修改得大一点,从而避免换行。
3.浮动的元素会具有行内块元素的特性(重点)。

浮动布局注意点:
1.其和标准流的父盒子搭配。
2.若一个盒子浮动了,其他的兄弟盒子理应给予浮动。
3.浮动的盒子只会影响其后面的标准流,而不会影响其前面的标准流。

浮动的盒子之间没有缝隙。
为了约束浮动元素,一般先用一个大盒子(标准流)将他们框起来。
块级元素若不设置宽度则默认为父元素的宽度。
若需要块级盒子和浏览器界面一样宽,则不需要额外指定宽度。

有时父盒子不方便设置高度,可以用子盒子撑开,但是浮动的盒子无法撑开,
使父元素高度为0,故有时要去清除浮动。
因为浮动元素脱离了原文档流。

清除浮动的本质就是清除浮动元素造成的影响。
若父盒子本身有高度,则不需要清除浮动。
清除浮动后,其就可以撑开没有设定高度的父盒子了。
清除浮动语法规范:clear:属性值;
属性值为left(清除左侧浮动的影响),right(右侧),both(两侧)。
实际开发中,几乎只用clear:both;

清除浮动的策略:闭合浮动(不影响除父元素外的其他元素)。
方法:
1.额外标签法。(w3c推荐做法,但后面为推荐方法,用的少)
找到最后一个浮动元素,在后面加上一个新的标签,在新的标签中添加clear:both;即可。
但是会添加许多无意义的标签,结构化较差。且这个新的标签必须是块级元素。
不能是行内元素。

2.父级添加overflow属性。
overflow的属性值为hidden,auto,scroll。(一般用hidden)
缺点为无法显示溢出的部分。

3.父级添加after伪元素(类似于hover的添加)。
并加上{content: "";
display: block;
height: 0;
clear: both;
visibility: hidden;}即可。
原理:类似于额外标签法,在后面插入了一个新盒子。
然后再在类上添加一句 *zoom: 1;(照顾低版本浏览器) 就可以了。

4.父级添加双伪元素。
与法3差不多,但额外添加了一个before伪元素。
before{
  content:"";
  display: table;
}
after{
     clear: both;
}
在前面和后面都添加了一个盒子。同理都要照顾低版本浏览器。

css属性书写顺序(重点):
1.布局定位属性:display,position,float,clear,visibility,overflow
建议display第一个写。
2.自身属性:width,height,margin,padding,border,background
3.文本属性:color,font,text-decoration,text-align,vertical-align,
white-space,break-word
4.其他属性(包含css3):content,cursor,border-radius,box-shadow,text-shadow

页面布局整体思路:
1.确认页面的可视区,版心(盒子宽高),测量可知。
2.分析页面中的行模块,以及行模块其中的列模块,也就是页面布局第一准则。
也就是分析盒子的构成。
3.行模块中的列模块经常浮动布局,先确定列的大小,在确定其位置,也就是页面布局第二准则。
4.现有结构,后有样式,即先html,再写css,结构永远最重要。
5.先理解布局结构,再写代码。

在实际开发中,不会只用a做导航栏,而是用li+a的形式做导航栏,这样更有条理,
且如果直接用a搜索引擎容易辨别为有堆叠关键字的嫌疑(可能会被降权),
从而影响网站排名。

对于刚开始制作网页时,页面太小没有滚动条,可以给body添加一个较大的高度,
这样就可以出现滚动条,观感较好。

第三:定位
有些情况用标准流,浮动很难实现,所以只能用定位(如让一个盒子固定在屏幕中的某个位置)。
定位:将盒子定在某一个位置,所以定位也是在摆放盒子,按照定位的方式移动盒子。
注意:定位的显示在标准流和浮动之上。

定位组成: 定位模式+边偏移
定位模式用于指定一个元素在文档中的定位方式,边偏移则决定了该元素的位置。

1.定位模式
通过css中的position属性来设置,其值主要有四个:
(1)static 静态定位
(2)relative 相对定位
(3)absolute 绝对定位
(4)fixed 固定定位

2.边偏移
定位盒子的最终为位置,有top,left,right,bottom四个属性。
(1)top 定义元素相对于其父元素上边线的距离。
(2)left 定义元素相对于其父元素左边线的距离。
(3)right 定义元素相对于其父元素右边线的距离。
(4)bottom 定义元素相对于其父元素下边线的距离。
注意:这四个属性仅存在于定位中,其他的并不存在。

static(静态定位),为元素的默认定位方式,也就是无定位。
按标准流的特性摆放盒子,使用极少。

relative(相对定位),也就是元素在移动位置的时候,是相对于它原来的位置来说的。
即加上边偏移后,会相对于原来的位置为基准移动。且原来的位置是保留的,
不会被占有,也就是不脱标!!!通过这个来限制绝对定位。(重要)

absolute(绝对定位),绝对定位是盒子相对于它的祖先元素来进行移动的。
1.若没有父元素,或者祖先元素没有定位,则以浏览器为基准。
2.如果祖先元素有定位,则以最近的以及有定位的祖先元素为参考。
(祖先元素就是疯狂往上找父元素)
3.绝对定位脱离了标准流,不占有原来的位置。

定位准则:子绝父相。
1.子盒子使用绝对定位,不占有位置,且不会影响其他的兄弟盒子。
2.父盒子使用相对定位,这样可以占有位置,布局更好。
注意:子绝父相并非永远不变,若父元素不需要占有位置,子绝父绝也有。

fixed(固定定位),也就是元素固定于浏览器可视区的位置,类似于body背景图片中的
fixed,但更方便,功能更多。
1.以浏览器的可视窗口作为参照点移动元素,由浏览器窗口大小绝定。
2.和父元素没有任何关系。
3.为固定定位,不随滚动条滚动。
4.固定定位不占有原来的位置,也是脱离标准流的。

使元素固定在版心位置(使用固定定位):
先让元素left:50%; ,在给其加上一个margin-left或margin-right,其值为版心宽度的一半。

sticky(粘性定位),可以被看作是相对定位和固定定位的混合。
就是一个元素先开始不为固定定位,滚动条向下滚动一段时间后,就变成了固定定位。
语法规范: position: sticky;
1.以浏览器的可视窗口作为参照点移动元素。(固定定位)
2.粘性定位占有原来的位置(相对定位)
3.必须添加top,left,right,bottom其中一个才有效。(这里意思是开始为相对定位,
但当top,left,right,bottom其中一个的值达到以后,就变为固定定位,可以复原)
这个兼容性差,IE不支持。所以这种效果大部分通过js做,css中使用较少。


定位的叠放次序:使用定位布局时可能会出现盒子重叠的情况,这是可以使用z-index
来控制盒子的前后次序(z轴)。
语法规范: z-index: 数值:该数值可以为正整数,负整数,0 默认为auto,数值越大,
盒子越靠上。且设置的数值认为比auto大。
auto表示按书写顺序来,后来者居上。
注意:数值不能加单位!!!且只有定位的盒子有该属性!!!

定位的拓展:
1.绝对定位盒子居中
加了绝对定位或相对定位的盒子不能通过margin: 数值 auto;来进行居中,但可以先
left: 50%;再 margin-right: 盒子本身宽度的一半
2.定位的特殊特性
(1)行内元素添加绝对或固定定位后,可以直接设置宽度和高度。
(2)块级元素添加绝对或固定定位后,若不给宽度和高度,默认大小为内容的大小。
类似于浮动。
(3)脱标的盒子不会触发外边距合并的问题。
(4)绝对定位和固定定位会压住下面标准流的所有内容。

如果一个盒子既有left属性,又有right属性,不会发生层叠,而是默认执行left属性。
同理如果一个盒子既有top属性,又有bottom属性,不会发生层叠,而是默认执行top属性。

元素的显示与隐藏(以下都可以控制元素的显示和隐藏):
1.display属性。display: none;表示隐藏对象(开发中使用较多),display: block;也有显示元素的意思。
display: none;隐藏元素后,元素不占有原来的位置。(应用及其广泛搭配js使用,重要!!!)

2.visibility属性。共有4个属性:inherit,visible,collapse,hidden。
inherit表示继承最近的父级元素的可视性。
visible表示可见。
collapse表示隐藏,主要用于隐藏表格的行或列,隐藏的行列被其他内容所使用,对于表格以外的对象
其作用等同于hidden。
hidden表示隐藏。但隐藏后,原来的位置被保留。

3.overflow属性。共有4个属性:visible(默认),auto,hidden,scroll。
visible表示超出盒子的部分也会显现出来。
hidden表示溢出盒子的部分隐藏。
scroll表示在盒子内部添加滚动条,使之能够不溢出,但不溢出时也显示。
auto表示看情况添加滚动条。
但如果盒子有定位,慎用,因为其可能隐藏多余的部分。

overflow还可以指定x轴和y轴,如overflow-x: hidden;就是隐藏水平滚动条。


css高级技巧:
一.精灵图:减少服务器发送和接收的次数,提高页面的加载速度。
核心原理: 将网页中一些小的图片整合到一张大图中,从而有效减少请求次数。

主要针对于背景图片使用,就是把多个小背景图片整合到一张大图片中。大图片就称为精灵图。
就是把每个盒子都放上一张精灵图,由于我们只能看到盒子的部分,多余的会被砍去,所以只需通过
background-position调整背景图片的位置即可。
所以一般情况下为向上向左,所以都为负值。
使用时一定要精准测量,否则效果可能不好。
缺点:图片文件较大,且图片放大或缩小会失真,一旦图片制作完毕更换较为复杂。


二.字体图标:用于显示网页中通用的,常用的,结构样式较为简单的图标(如拍照的照相机图标)。
这种方法展示的是图标(看上去像),本质属于字体,不会出现精灵图的缺点。
优点:
1.轻量级:图标字体更小,渲染快,减少服务器请求。
2.灵活性:本质为文字,可更改性强。
3.兼容性:几乎支持所有的浏览器。
下载推荐途径:icomoon.io(外国服务器,全面)/ www.iconfont.cn(阿里,懂得都懂)
使用方法:
1.将解压得来的font文件夹与编辑的html文件放到同一目录下。
2.将其中style中的代码从最开始复制到display:block,并粘贴到css中。
3.打开下载包中的html,复制你要用的图标后面的小方块并粘贴,或者可以写"\加上前面的代码"。
4.复制你所复制的style代码中大括号内的第一行代码(font-family),并粘贴到要引用的标签的css中即可。
注意:字体图标属于一种字体,如混合了其他的字体,需按font-family的连写方式使用,图标的font-family滞后。
一定要注意一下路径!!!

字体图标的追加:只需要将下载包里的selection.json重新上传,再次下载替换即可。


三.css三角:美观。
核心原理:给没有宽度和高度的盒子添加边框,就会出现三角形,只需要将其他三条边的颜色改为透明即可。
三角形的大小和边框的粗细相关。为了照顾兼容性,line-height和font-size也需设置为0。
注意:三角形尖端的朝向和所在边界相反。


界面样式:就是用户的操作样式,增强用户体验。
1.鼠标样式:设置或检索在对象上的鼠标指针采用何种系统预定义的光标形状。(前面可为任意标签)
语法规范:cursor: 属性值;
共有default(白指针,默认),pointer(小手),move(移动,十字架),text(文本,I形),not-allowed(禁止)
这种方法后面一般配合js使用。
自定义鼠标样式只需这样: cursor: url(),auto;即可
一般前面的标签为body。

2.轮廓线:当在<input>中输入时,默认会带有蓝色边框轮廓线。
语法规范:outline: 属性值;
给表单添加outline: 0;或outline: none;后可去掉默认的蓝色边框。

3.防止拖拽文本域:文本域会默认带有一个拖拽角,可以改变文本域的方框大小(一般不需要)。
语法规范:resize: 属性值;
一般写resize: none;去掉即可。


vertical-align属性
经常用于设置图片或表单和文字垂直对齐(但只针对行内元素和行内块元素)。
语法规范: vertical-align: 属性值;
一般共4个值:baseline(默认,在傍边文本的基线上),top(元素顶端和行中最高元素顶端对齐),
middle(放置在旁边文本中部),bottom(元素顶端和行中最低元素顶端对齐)
基线类似于英语的四线三行中的从上至下第3条线。
当图片通过行高无法居中对齐时,图片底下出现空白缝隙时,一般都是这里的问题。

图片底部会默认有一条空白缝隙,但多数情况下不需要。原因是行内块元素会默认和文字的基线对齐。
只需将其的vertical-align改为非baseline即可。还可以将其转换为块级元素即可(不推荐)。

单行文本显示省略号必须满足三个条件:
1.先强制一行内显示文本: white-space:nowrap;(默认为normal,自动换行)
2.超出的部分隐藏: overflow:hidden;
3.文字用省略号替代超出的部分: text-overflow: ellipsis;

多行文本溢出显示省略号兼容性问题较大,只支持基于webkit内核的浏览器和移动端(注意,故仅限于了解,一般有后台人员做)
语法规范:上述的2,3再加上
1.弹性伸缩盒子模型显示:display: -webkit-box;
2.限制在一个块元素显示的文本的行数: -webkit-box-clamp: 行数;
3.设置或检索伸缩盒对象子元素的排列方式: -webkit-box-crient: vertical;
且只有超出才显示省略号,若超出了限制的行数接下来的也不会省略,所以要限制高度。

常见布局技巧:
1.margin负值的应用
两个浮动盒子的边框合并问题,可以给靠右边的一个盒子加一个margin-left: -边框粗细;
即可使右边那个盒子的边框压住左边的,从而解决问题(css由顺序执行的)。
但这样给盒子加hover时,会使得中间盒子的右边框无法显示,所以还需在hover中给其改为相对定位即可。
若盒子都有定位,只需更改z-index即可。

2.文字围绕浮动元素
利用浮动盒子不会压住文字和图片来做。

3.行内块的巧妙应用
如淘宝页面的页面跳转,可以利用多个行内块元素进行制作,因为行内块元素之间带有空隙,
且可设置height和width,故使用行内块元素更高效。且在父盒子中添加text-align: center;即可实现居中。


4.css三角强化
梯形的制作: 之前的那种方法只能制作等腰三角形,若制作一个非等腰的直角三角形,需将其一边或两边的边界改为0,
通过扩大剩下的一个三角形,从而得到一个非等腰的直角三角形。此时只需将该三角形通过绝对定位来覆盖到矩形上,
并调整颜色即可实现梯形的制作(在盒子中再放一个height和width为0的盒子并修改边框添加绝对定位即可)。

5.页面的竖线
改变一下盒子的长度和宽度,并加上背景颜色,即可实现竖线的生成,设置其外边距后即可实现其周边盒子的整齐排列。
当然,也可以直接用 | 。

6.分割线
页面的分割线,相当于html中的<hr />,可以用盒子的边框来做。

7.浮动元素li的一行显示
当盒子不够装下指定数量的li时,可以略微扩大列表的宽度,使之能一行排列。若有li有边框,
可以overflow: hidden;使之溢出的部分被看到。

css初始化
不同浏览器对一些标签的默认值是不同的,为了清除这些差异并照顾浏览器的兼容性,
需要css初始化。也就是重设浏览器的样式。(每个网页都需要这一步!)

有一些浏览器不认识汉字,所以用unicode编码来代替,这样可以避免解释css时出现乱码(兼容性强)。
宋体的unicode为\5B8B\4F53 。


对于创建光标悬停即出现的下拉菜单,需将出现的元素包含在想要悬停即出现菜单
的标签中,如<li></li>中的下拉菜单,需将其包含在<li></li>中在通过下述语法规范
即可显示。
语法规范: 父标签:hover .类名{display:block;}
在此之前,还需要将其修改为 display:none; position: absolute;(定位实现)
父标签也应添加一句 position:relative;
从而确保菜单在父标签未获得标签时不出现和在父标签下方出现。

对于页面中常见的选项卡,也就是页面中的tab栏切换,对html布局有严格的要求,其一为选项,其二为内容,
选项和内容要严格对应。实际效果也是用js制作的。

font-smooth: antiaoiased;表示抗锯齿,当文字放大时锯齿会较少。

pointer-events表示元素与点击的交互,若其值为none,则元素不会发生任意的交互事件,并允许穿透到下层。

焦点图原理:通过ul列表中的li来插入图片,再通过js实现滚动来实现轮播图。

opacity表示一个元素的不透明度,其值在0到1.0之间,默认为1(完全不透明)。
语法规范: opacity: 值;

对于类似波纹的效果,一般采用阴影(box-shadow)做,随波纹的扩散,透明度需变低,且动画中不能使用scale使盒子变大,
因为scale会让阴影中的参数也变大,而直接修改width和height则没有这个问题。

有的时候样式修改失败可能是因为权重的问题!!!!!!!

-----------------------------------------------------------------------------------------------------------------------
css3的新特性:
1.移动端支持优于pc端。
2.兼容性问题。
3.可以做动画。
4.还可以做一些2D,3D的效果。

css3的其他特性:
1.filter滤镜:可以将模糊或颜色偏移等图形效果作用于元素。
语法规范:filter: 函数();
如filter: blur(5px);模糊处理,里面的数值越大越模糊,数值要加px的单位。

2.calc函数:可以在声明css时进行一些计算。
注意: calc中运算符前后都要保留一个空格,否则会失效。
可以包含百分比和数值,且可以进行连续运算。


css3过渡(重要!!!极为好用!!!!)
transition(从一个状态渐渐过渡到另一个状态)可以在不使用flash动画和js的情况下,使得元素从一种样式变换到另一种样式时,添加效果。
IE9以下得浏览器不支持,但不影响页面布局。
常和hover搭配使用。
语法规范:transition: 要过渡的属性 花费时间 运动曲线 何时开始;
属性:想要变化的css属性,宽度高度,背景颜色,内外边距都可以,all表示所有。
花费时间: 单位是秒(s)，必须写单位。
运动曲线: 默认为ease(可以省略,逐渐慢下来),还有linear(匀速),ease-in(加速),ease-out(减速),ease-in-out(先加再减)
何时开始: 单位为秒,可以设置延迟触发时间,默认为0s(可以省略)

注意:谁做过渡给谁加,写在选择器中,如在hover时变化,则写在之前而非hover的选择器中。
若想给多个属性添加过渡,可以在第一个过渡后加上,再写第二个。

如进度条可以使用一个父盒子包含一个子盒子,子盒子的大小过渡变到100%,修改一下颜色即可。
给父盒子设置一个padding可以好看一些。
像小米的logo的图片变化,实则是采用了精灵图,两张图片缝合在一起,通过图片的移动来实现。



css3转换(重要!!!极为好用!!!!)
transform(也可以理解为变形)可以实现元素的位移,旋转,缩放等效果。
分别为 移动:translate ,旋转: rotate , 缩放: scale .

2D转换
2D转换是改变标签在二维平面上的位置和形状的一种技术。

translate(移动)
语法规范:transform: translate(x,y);或者分开写: transform: translateX(n); transform: translateY(n);
x为水平,y为竖直。
translate最大的优点:不会影响到其他盒子的位置。
注意:translate对行内元素没有效果。
translate里面的参数可以为百分比,百分比以自身为参照。

rotate(旋转)
在2D中表示元素在二维平面内顺时针或逆时针旋转,旋转点为元素的中心。
语法规范: transform: rotate(度数);
度数的单位为deg(度),角度为正时,为顺时针,反之为逆时针。

利用这个可以直接实现下拉菜单中小三角(之前用字体图标实现)的实现。
即给一个盒子正方形添加边框,并旋转45度后,去掉不需要的边框即可实现。
这样可以省去字体图标。

当然,元素旋转点中心点也可以更改。
语法规范: transform-origin: x y;
注意: 参数用空格隔开,默认转换中心点为元素的中心 50% 50% 等价于 center center。
还可以给x,y设置像素或者方位名词(top,bottom,left,right,center)

scale(缩放)
可以放大和缩小元素。
语法规范: transform: scale(x,y);
x修改的是宽度,y修改的是高度。(参数可为小数)
若修改比例相等,可只写一个数。(为简写)
大于一为放大,小于一为缩小。默认缩放中心点为元素中心。
scale优势(相较于直接修改宽度和高度):不会影响其他盒子,且可以设置缩放中心点。

设置缩放中心点也用transform-origin 。

若同时使用多个转换,有综合写法,语法规范: translate() rotate() scale()...;
注意: 因为代码有执行顺序,所以translate一般写在最前面(特殊情况可以应用这种属性从而减少代码量),因为其他的转换很可能会改变坐标轴方向。
旋转木马就是用这种属性减少代码量。

3D转换
特点:1.近大远小。 2.物体后面遮挡不可见。(参考特点即可产出3D效果)
多了一个Z轴(垂直屏幕,往外,即观看者方向为正,往内是负)

透视(perspective): 3D中极为重要!!!产生3D效果必须靠它(近大远小)。
也称之为视距,也就是眼睛到屏幕的距离,用于模拟人的视觉位置,相当于安排一只眼睛去看。
语法规范: perspective: 数值(一般设置为500px);
注意:透视写在被观察的盒子的父(父亲的父亲也算)盒子中,数值越小,3D的放大效果越明显。
单位为px 。
若3D效果出现时元素有所抖动,可能是透视调小了,将数值改大可能可以解决。
新版本的浏览器perspective需和transform-style连用才有效果。

3D位移
语法规范:transform: translate3d(x,y,z);
注意:x,y,z不能省略,如果没有就写0 。
和2D转换差不多。translateZ一般用px用单位。
但translateZ只能借助透视来看到,一般是看不到的。

3D旋转
3D旋转指可以让元素在三维平面内沿着x,y,z轴或者 自定义轴 进行旋转。
语法规范: transform: rotate3dX(数值);(沿X轴正方向旋转45度,以X轴为旋转轴,其他同理)
(注意:数值的正负对之后的布局影响很大,有左手定则判断正方向: 拇指指向旋转轴的正方向,其余4指弯曲的方向即为)
transform: rotate3d(x,y,z,deg);(沿自定义轴旋转,deg为角度,用于了解)
x,y,z为旋转轴的矢量(就是向量,如(1,1,0,45deg),就是沿着(1,1,0)的向量这条线为轴旋转),表示是否沿该轴旋转,最后一个表示旋转的角度。

3D旋转可能会撑大盒子,导致出现滚动条,这时候可以给父盒子加上一句overflow: hidden;即可解决。

3D呈现(3D常用)
当父盒子和子盒子同时具有3D属性时,父盒子的3D效果出现,子盒子的3D效果不会出现,所以需要3D呈现。
其用途为控制子元素是否开且三维立体环境,默认为flat。
语法规范: transform-style: flat(不开) / preserve-3d(开);
注意: 代码写给父级,但影响的是子盒子。

一个元素有两个面,前后不同,这样的效果其实是有两个盒子通过3D旋转完成的,后面那个盒子还要沿Y轴旋转180deg,否则字体会反。
注意: 两个盒子还要加上 backface-visibility: hidden;才能出现这样的效果。

对于大部分3D旋转呈现的面不同的效果,其实使用两个盒子所制作,一个在前面,另一个在后面旋转对应的角度,再用hover即可,记得动态旋转效果添加再父盒子中。
对于旋转90deg的,隐藏的那个面应该向前扑倒,再进行移动,这样字体就不会反。

3D导航栏的制作,在隐藏的那个盒子到达地面后,应使前面的那个盒子往前移动,因为旋转中心位于显示的那个盒子的中心,
若不这样,旋转效果看起来就显得不那么好,移动前面的那个盒子的话,旋转中心不变(相当于立方体的中心),这样3d效果看起来才好!

在旋转木马中,给body加透视,给父盒子加transform-style,就不会有问题。

动画(animation)可以通过设置多个节点来精确控制一个或一组动画,用来实现复杂的动画效果。(不用说,懂得都懂)
相较于过渡,动画可以实现更多变化,更多控制,连续自动播放的效果。

动画属性:
1.animation 所有动画的简写属性,除了animation-play-state 。
2.animation-name 规定的动画名称(必须的)。
3.animation-duration 规定动画完成一个周期的时间,默认为0 (必须的)。
4.animation-timing-function 规定动画的速度曲线,默认为ease。额外的还有steps(正整数),指定了时间函数的间隔数量(步长),类似于堆积木的方式一步步变多。
5.animation-delay 规定动画何使开始,默认为0。
6.animation-iteration-count 规定动画播放次数,默认为1,还有infinite(无限)。
7.animation-direction 规定动画是否再下一周期逆向播放,默认为normal,alternate为逆向播放。
8.animation-play-state 规定动画是否正在运行或暂停,默认为running,还有pause(通常和hover连用)。
9.animation-fill-mode 规定动画结束后的状态,即停在什么地方,保持forwards,回到起始backwards(默认)。

当然有简写方式
语法规范:animation: 动画名称(必须) 持续时间(必须) 运动曲线 播放次数 是否反方向 动画结束后的状态;
非必要的可以不写。

制作动画分为两步:
1.先定义动画。

用keyframes定义动画(类似定义类选择器)
语法规范:
@keyframes 动画名称 {
     0% {
          样式
     }

     100% {
          样式
     }
}
这里的百分数(以时间为参照)叫做动画序列(也就是关键帧),0%为动画的开始,100%为动画的结束。
当然可以设置更多的动画序列,如50%,75%,可为1-100中的任意一个数字。
动画序列也可以使用from,to 这样等同于0%和100%。
注意:所有样式的参照均为初始位置。

2.再调用动画。
使用方法:
animation-name: 调用的动画名称;
animation-duration: 动画完成一个周期的时间(单位为s);
但一般使用animation简写。

一个元素可以可以添加多种动画,在animation前一个动画的最后一个属性中用 , 隔开即可。
即animation: 第一个 time ,timing-function,第二个 ...; 

行内元素不能添加动画(不确定)

---------------------------------------------------------------------------------------------------------------------------------------------------

以上为pc端,以下为移动端。

移动端浏览器历史相对较晚,所以其的兼容性相较于pc端来说就比较好。
而且大部分移动端主流浏览器,都是根据IE修改过的内核,所以只需要webkit能够处理的代码,移动端就能兼容。
所以可以放心地使用h5和c3的标签,私有前缀只需要加-webkit-即可。

注意: 移动端的屏幕碎片化比较严重,分辨率和屏幕尺寸大小不一,页面布局时需考虑(需给body指定min-width和max-width,或者把width的单位改为rem,使之能随着屏幕大小的变化而变)。

移动端调试方法(调试和pc端一样):
1.chorme的模拟手机调试。(edge也有,在检查页面的左上角:切换设备仿真)
2.搭建本地web服务器,手机和服务器在同一个局域网内,通过手机访问服务器。
3.使用外网服务器,直接IP或域名访问。

以上为pc端结构,以下为移动端结构。

视口(viewport)
浏览器显示页面内容的屏幕区域。可以分为布局视口,视觉视口和理想视口(但常用的只有理想)。
1.布局视口(layout viewport)
一般的移动设备都默认设置了一个布局视口,用于解决早期pc web在手机上显示的问题。
IOS,Android基本将这个设置为980px,所以pc的大部分web都在手机上呈现,不过元素看起来很小,一般默认可以通过手动缩放网页。
但字太小了,操作也不方便,所以不常用(基本淘汰)。

2.视觉视口(visual viewport)
即用户正在看到的网站的区域。
注意: 是正在看到的网站的区域。
可以通过缩放去操作视觉视口,但不会影响布局视口,布局视口仍然保持原来的宽度。
但也不好操作。

3.理想视口(ideal viewport)
使网站在移动端用最理想的浏览和阅读宽度而定。
对于设备来讲,是最理想的视口尺寸。需要手动填写meta视口标签通知浏览器操作。
meta视口标签的主要目的: 设备有多宽,布局的视口就有多宽(感谢jobs)。

meta视口标签(PC端有无都可以,移动端不行)
语法规范:<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimun-scale=1.0">
属性:
1.width viewport的宽度,可设置为device-width特殊值。
2.user-scalable 用户是否可以缩放,yes / no (1 / 0)。
3.initial-scale 初始缩放比,大于0,一般为1.0 。
4.maximum-scale 初始缩放比,大于0。
5.minimun-scale 初始缩放比,大于0。

标准的viewport设置即如语法规范所示。

物理像素和物理像素比
物理像素点是屏幕显示的最小颗粒,是物理真实存在的,为出厂即设置好的。
移动端开发中1px不一定为1物理像素(不尽相同),但pc端是。
1px能显示的物理像素点的个数,称为物理像素比或屏幕像素比。

retina(视网膜屏幕)是一种显示技术,可以把更多的物理像素点压缩到一块屏幕里,从而达到更高的分辨率,提高屏幕显示的细腻程度。
这也就是为什么1px和手机上的1物理像素并不相等。
所以对于一个50px * 50px 的图片在retina屏中打开,会按照物理像素比放大倍数,造成图片模糊。
故在标准的viewport设置中,使用倍图来提高图片质量,解决在高清设备中的模糊问题(浏览器上的手机模拟会缩小屏幕的尺寸,使之1像素为1css像素)。
通常使用二倍图,但由于iphone6 / 7 / 8的影响,现在还存在着3,4倍图的情况,看甲方怎么说。
背景图片也要注意缩放问题。

二倍图就是将需要的图片先变为原来的两倍,再手动缩小为原来的大小(如一张50px*50px的图片,先将其变为100px*100px,再手动缩小为50px*50px)
即准备的图片为原来的两倍,在实际开发中缩小即可。

移动端的css初始化文件推荐使用normalize.css(已存入文件夹+github内)

在移动端的链接中,它会默认地带有点击高亮的样式,只需加上-webkit-tap-highlight-color: transparent;即可

IOS中input的botton会有一个高亮的效果(显得不好看),需加上: -webkit-appearance: none;即可。

移动端长按页面时会弹出菜单,而图片或链接图片不需要,需禁用,需加上 img,a {-webkit-touch-callout: none;} 即可。

对于移动端中的搜索框,视口变小,但只有搜索框(搜索框自适应)变小,采用的是其他盒子采取绝对定位,而中间盒子采用标准流,通过padding或margin来定位搜索框。
这样还可以使用flex布局,只需确定左右的宽度,在中间的盒子中加上flex: 1;即可。

移动端中常用的精灵图为二倍精灵图,需先将其缩放(位于background前后都可以),再移动背景图片的位置。


移动端常见布局(先看是哪种方法)
1.单独制作移动端页面

(1)流式布局(百分比布局,使用较为常见)
为百分比布局,也称为非固定像素布局。
通过设置盒子的宽度为百分比来根据窗口宽度进行伸缩,不受固定像素的限制,内容向两侧填充(高度一般为固定像素)。
但这样设置的话,随着窗口的变小,文字可能会被挤掉,所以通常还伴随的max-width,min-width(最 大 / 小 宽度),最 大 / 小 高度为max-height和min-height。

注意: 百分比是相对于父元素来说的。

可以先给body指定width: 100%; 通过继承性减少代码量,同时给body指定max-width,min-width。

-------------------------------------------------------------------
(2)flex弹性布局(推荐!!!非常灵活)
传统布局的兼容性好,但布局繁琐,在移动端也不能很好的布局。
flex弹性布局操作方便,布局极为简单!!!!移动端应用广泛。但兼容性差,IE11及其以下,都不支持或部分支持。
所以PC端使用传统布局,而移动端使用flex布局。

任何一个容器都可以指定flex布局,可以为盒子模型提供最大的灵活性(一般给父盒子指定),且一般不需要进行盒子模型的转换。
注意:当父元素设置为flex布局后,子元素的float,clear,vertical-align,position都会失效!!!

采用flex布局的元素称为flex容器,简称"容器",它所有的子元素自动成为容器成员(类似于行内块元素),称为flex项目,简称"项目"。

flex布局原理: 给父盒子添加flex属性,从而控制子元素的位置和排列方式!!!

在flex布局中,分为主轴和侧轴两个方向,同样的叫法有: 行和列, x轴和y轴
默认的主轴为x轴方向,侧轴为y轴方向。
注意:主轴和侧轴时可以进行变化的,看flex-direction设置谁为主轴,剩下的即为侧轴,子元素就是跟着主轴来排列的。

父元素常见属性:
1. flex-direction: 设置主轴的方向
值: row(默认,从左到右) row-reverse(从右到左) column(从上到下) column-reverse(从下到上)

2. justify-content: 设置主轴上子元素的排列方式
注意: 使用时先确定主轴是哪个。
值: flex-start(默认,从头部开始,如主轴为x轴,则从左到右) fix-end(从尾部开始) center(主轴居中对齐) 
space-around(平分剩余空间,即给每个盒子一个相同的且左右相等的margin) space-between(先两边贴边,再平分剩余空间,这个很重要)
前两个类似于浮动。

3. flex-wrap: 设置子元素是否换行
flex中子元素排列过多导致父元素一行装不下时,它不会换行,而是缩小其他的盒子使之能够在一行上显示。
因为默认情况下,项目都排在轴线上,不换行为默认。
值: nowrap(默认,不换行) wrap(换行)

4. align-content: 设置侧轴上的子元素排列方式(多行)
只能用于子项目出现换行的情况(必须为多行),单行无效。
值: flex-start(默认,从头部开始,如侧轴为y轴,则从上到下) fix-end(从尾部开始) center(侧轴居中对齐) 
space-around(平分剩余空间,即给每个盒子一个相同的且看主轴的相等的margin) space-between(先两边贴边,再平分剩余空间,这个很重要) strech(子项元素高度平分父元素高度)

5. align-items: 设置侧轴上子元素的排列方式(单行)
值: flex-start(类似于主轴) flex-end(类似) center(类似) stretch(拉伸,默认,即将子盒子拉到和侧轴一样长,不能给盒子相应的长度,否则无效) 

6.flex-flow: 复合属性,相当于同时设置了flex-direction和flex-wrap
语法规范: flex-flow: flex-direction flex-wrap;

子元素常见属性
1.flex子项目占的份数
用flex属性来表示子项目对剩余空间的分配,表示占多少份数。
语法规范: flex: 数字;
对于PC端浮动做的横向排列,在flex布局中,只需要在子项目中加一句flex: 1;且不设置宽度高度即可即可(剩余空间为一整个)
注意:flex里面的数字还可以写百分比(相对于父盒子来说的),使得10个元素可以在两行上排列。

2.align-self控制子项在侧轴的排列方式
该属性允许单个项目于其他项目有不一样的对齐方式,可覆盖align-items,默认为auto,表示继承,若没有父元素,则等同于stretch。
值和前面的align-items一致。
注意:该属性不会影响在主轴上的排列(在主轴上不会提前)

3.order属性定义子项的排列顺序
数值越小(不是越大!!!),排列越靠前,默认为0。

--------------------------------------------------------------------

---------------------------------------------------------------------------
(3)less + rem + 媒体查询 布局 (除此之外,还有flexible.js + rem 布局,这种方法更为简单,也更为推荐,市场上两种方案都存在)
Less介绍:
由于css的弊端,我们需要一种方案去解决,这就是Less 。
Less(叫做learner style Sheets)是css扩展语言,也叫css预处理器。
作为css的扩展,它并未减少css的功能,且在css上添加了程序式语言的特性。
它在css中引入了变量,Mixin(混入),运算以及函数等功能,大大简化了css和降低了它的维护成本。
Less中文网址: http://lesscss.cn/ 

总结:Less是一门css预处理语言,扩展了css的动态特性。

常见的css预处理器:Sass,Less,Stylus
下面主要为Less的使用:
注意less的使用需单独安装,vscode里面已安装。

less有其单独的后缀名less,专门在这个文件里面书写less语句(css同样适用)。

less文件可以引入其他的less文件(css也可以这样)
语法规范: @import "文件路径";(双引号不能省略)
这样可以减少html的代码量。

1.less变量
语法规范: @变量名: 值;
使用时只需要将 @变量名 写到属性中即可。
变量命名规范参考c++。

2.less编译
less文件需要编译成css文件才能被html所使用。
在vscode上安装easyless之后只需保存一下,即可在当前目录下生成编译后的css文件。

3.less嵌套
当既要修改父元素,又要修改子元素时,可以使用less嵌套。
如<div><a></a></div>两个都要修改时,在less中可以div;{ 样式;  a {样式;}}
当生成css时,就可以变为原来的样子。

如果遇见 伪类/伪元素选择器 选择器,则需先加一个 & 符号,再按照其书写方式去执行。 
如 a:hover 在less中可以这样写 a{ 样式; &:hover{样式;} }

4.less运算(非常强大)
在less中任何数字,颜色,或者变量都可以参与 + , - , * , / 的运算。
如width: 100px;若觉得宽度太大了,可以直接在里面加减,即width: 100px - 5;这样就可以了。
注意: 和calc一样,运算符两边要留出空格。两个数参与运算,如果只有一个数有,则结果以该单位为准。如果两个数都有单位且不一样的话,结果的单位以第一个为准。

复合运算的顺序和数学中一样。

rem(root em)是一个单位,一个相对单位,类似于em(相对于父元素字体大小来说的)。
但不同的是rem的基准是相对于html的字体大小(和父元素无关)。比如根元素(html)的字体大小为12px,非根元素设置width为2rem,换算成px就是24px。
这样就可以通过修改html的字体大小来控制全部的元素大小。

但html的字体需单独设置,在不同的设备上很难做到更改,所以需要用到媒体查询。

cssrem(已安装)这个插件可以将单位px转化为rem,这个插件默认的html字体大小为16px。
若要修改,则在设置中工作区的搜索框中输入cssrem,往下寻找root font size并修改即可(修改完后记得重启vscode)。


媒体查询(Media Query)是css3的新语法。
使用@meida查询,可以针对不同的媒体类型定义不同的样式。
且@media可以针对不同的屏幕尺寸设置不同的样式。
语法规范:@meida 媒体类型 关键字 (媒体特性)
{
     css代码;
}

媒体类型是根据不同的终端设备划分的,其值有all , print(打印设备和打印预览) , screen(用于电脑屏幕,平板电脑,智能手机等) 

关键字则只有三个,分别为and(且), not(排除,可省略), only(特定,可省略),可以多写!!!

每种媒体类型都有不同的特性,我们要根据不同媒体类型的特性设置不同的展示风格。
可以有多个属性: max-width , min-width , width(定义输出设备中可见区域的宽度)
注意: 属性值的单位不能省略!!! 

如@meida screen and ( max-width: 800px(不能有分号!!!) ) {}  这就表示在屏幕上且最大宽度不超过800px来设置样式。
通过媒体查询,就可以在不同的设备中设置不同的样式。

在媒体查询中只需要写关键的代码即可,其他的照常(只需要将单位改成rem即可)。

媒体查询的引入资源:根据不同的屏幕尺寸来引入不同的css文件。
语法规范:<link rel="stylesheet" media="媒体类型 关键字 (媒体特性)" href="路径">

若想在不同屏幕下更改样式,可以在媒体查询中写,利用层叠性(或者权重)将其覆盖掉,也避免了其覆盖掉前面的。

注意: 媒体查询一般按照从大到小,或者从小到大的顺序来。

对于html中字体大小的设置,我们有这样的方法:
假设设计稿是750px,那么就把整个屏幕分成15等份(不一定,看标准),一份作为html字体大小,也就是50px。
其他的屏幕和上面的一样,15等分(实际开发中看要求)后1份为html的字体大小。
所以页面元素的rem值=页面元素值(px)/(屏幕宽度/划分的份数)


相较于前一种更高效的rem适配方案flexible.js
原理: 将当前设备划分成10等份,但不同设备下的比例一致。

不需要写媒体查询,因为js已经将屏幕划分好并确定了html的字体大小了。
所以只需要了解当前设备的html文字大小就可以了。

js文件需单独下载,下载地址: https://github.com/amfe/lib-flexible


(4)vw/vh 方案(可淘汰rem方案)
vm/vh 是一种相对单位,是根据相对视口的尺寸计算结果。
vw: viewport width,  vh: viewport height  
1个vw = 1/100的视口宽度
同理,1vh = 1/100的视口高度

当然,在开发中,vh一般不使用,也不与vw混用(一般都使用vw)。

所以该方案的原理:在不同宽度的设备中,实现网页元素尺寸等比缩放的效果。

只需确定视口的宽度后,即可根据相应的ps/(视口宽度/100)即可。

bilibili的首页采取的是vmin的单位,vmin / vmax 表示当下屏幕宽度和高度的最小值 / 最大值 的百分之一(这样是为了照顾横屏的情况,提升体验)。

-----------------------------------------------------------------------

(5)混合布局(一般都是上述混合使用,哪个用来布局好用用哪个)

-------------------------------------------------------------------------------------------------------------

2.响应式页面兼容移动端(三端兼容,不关心高度,因为随屏幕的变小,布局模式发生了变化)
原理: 通过媒体查询来针对不同的设备进行布局和样式的设置,从而适配不同的设备。

响应式页面需要一个父级作为布局容器(需要的不止一个),配合子元素实现变化效果。
通过改变父级容器的大小,从而改变里面子元素的排列方式和大小,实现不同屏幕下,看到不同的页面布局和样式变化。

(1)媒体查询
响应式可以将屏幕划分成4个挡位
1.手机 <768px; 容器宽度设置为100%
2.平板 >=768px 且 <992px; 容器宽度设置为750px
3.桌面显示器 >=992px 且 <1200px; 容器宽度设置为970px
4.超大显示器 >=1200px 容器宽度设置为1170px

容器的宽度设置比屏幕小一点会显得比较好看。

(2)Bootstrap(学习重点在于知道它定义了哪些样式,以及相应的样式能实现什么样的结果)
Bootstrap来自于X(twitter),是目前最受欢迎的前端框架,基于html,css,js的,简洁灵活,可以使web的开发更为快捷。
框架: 一套结构,有一套比较完整的网页功能解决方案,而且控制权在框架本身,有预制样式库,组件和插件,使用者要按照框架所规定的某种规范开发。

框架最大的优点是拿来即用,开发简单,html和css编码规范,且会不断的更新迭代。

获取网站: https://getbootstrap.com/
中文网站: https://bootcss.com/    (记得关掉广告过略器)

使用步骤:
1.创建文件夹结构。 
Bootstrap的相关文件单独放一个文件夹。

2.创建html骨架结构

3.引入相关的样式文件。 
要引入bootstrap的相关文件。
初学者只需要引入其中的css中的min.css即可。

4.书写内容。
可以直接使用Bootstrap预先定义好的样式。
也可以修改bootstrap原来的样式(引入新的类名,只需要注意权重即可)。

在bootstrap中的响应式容器类必须叫.container,因为bootstrap已经定义好了。
且不需要写媒体查询。

Bootstrap还有container-fluid类,流式布局容器,适合单独做移动端开发,宽度为100%。

Bootstrap内部采取栅格系统(类似于网格),将页面布局划分成等宽的列,通过列数的定义来模块化页面的布局。
Bootstrap会随着视口尺寸的增加,会把container自动平均分为最多12列。

Bootstrap是通过一系列的行(row)和列(column)来布局的。

在bootstrap中,row必须放到container里面(row还可以去除container的内边距),且想要实现类的划分,必须给列添加类前缀。
类前缀: col-xs-所占的列数 手机,   col-sm-所占的列数 平板,   col-md-所占的列数 桌面显示器,  col-lg-所占的列数 大桌面显示器。
这里的类是向大屏方向兼容的。

一行中所有所占的列数相加为12即可,如果小于12,就占不满整个container的宽度,如果大于12,则多余的会另起一行显示。

在bootstrap中,可以为1列同时指定多个设备的类名,如class="col-lg-3 col-md-4"这种,不需要媒体查询。
Bootstrap中每一列都有一个默认的15px的内边距。

Bootstrap中的列采取的是浮动的方式,所以让他们之间存在距离不能是用外边距,应使用列嵌套(将该列当成container,在使用row和col的组合)的方式,用内边距显示距离。
若列嵌套中不写row,直接写col,无法取消父元素的padding值,高度也不和父元素一样高。

Bootstrap中有专门的清除浮动类:clearfix ,只需要在想要清除浮动的盒子中加上这个类即可。

Bootstrap中的列偏移: col-md-offset-偏移的列数 可以将列向右边偏移,这些类其实是使用了*选择器增加了margin-left 。
注意:不能直接给margin值,因为响应式页面margin值不固定,需用百分比。

Bootstrap中的列排序: 使用col-md-push-相应的列数 和 col-md-pull-相应的列数 类可以改变列的顺序。
顾名思义,push为推,往右边,pull为拉,往左边。

Bootstrap中的响应式工具,是利用媒体查询功能,可以轻易的实现针对不同的设备页面内容的显示和隐藏。
hidden-xs 只在超小屏(手机)上隐藏
hidden-sm 只在小屏(平板)上隐藏
hidden-md 只在中屏(桌面显示器)上隐藏
hidden-lg 只在大屏(超大显示器)上隐藏
与之相反的是visible(后面的和上面一样),也是只在特定屏幕下显示。

Bootstrap中有字体图标,如需使用,只需在Bootstrap中的组件中找到相应的图标,再将其下面的英文复制,添加到class里面即可。
原理是在相应的盒子中添加了一个before伪盒子,所以想要修改的话只需修改before即可。

在实际开发中,container的宽度根据设计图来定,使用媒体查询来改(只要屏幕的宽度大于设计图,就按设计图来)。

Bootstrap还有专门的颜色类,只需查看文档中的辅助类即可获取。

Bootstrap还有专门的按钮类,且其他类型的标签也可以使用(不只有button可以使用)。

在响应式页面中,由于屏幕的切换,图片的宽度若设定为100%,则在缩放时图片的大小可能会很大,所以要写max-width: 100%;(这里的最大宽度表示图片本身的宽度)这样当页面缩小时,图片就不会过大了。
而且在超小屏下,图片可能显得过大,所以在超小屏下,可以把图片换成文字。

Bootstrap的其他类名看它的中文文档。
