js库: 即library,是一个封装好的特定的集合(方法和函数)。也就是封装了一些定义好的函数在里面。
简单理解就是一个js文件,里面对原生js代码进行了封装,可以提高开发效率。

学习js库的本质就是学习调用js库中的函数。


注意: 不同于原生js,jQuery里面的引号一般为""；

若采用了jQuery的js代码单独写在一个文件中,我们只需要先将jQuery代码引入到html页面中,再引入该文件即可。


jQuery(查询js) 能够快速方便的操作DOM的一个js库,里面基本都是函数(方法)
jQuery封装了js常用的功能代码,优化了DOM操作,事件处理,动画设计和Ajax交互。

jQuery下载地址: https://jquery.com/ (找到需要的文件后,复制粘贴即可)

jQuery的使用: 引入相应的文件,直接写代码即可。

jQuery的顶级对象 $
$ 是jQuery的别称,同时也是jQuery的顶级符号(相当于原生js的window对象),可以用jQuery代替(一般不用)。

DOM对象是通过原生js来获取的,而jQuery对象则是通过jQuery的方法来获取的。
jQuery对象的本质是利用 $对DOM对象包装后产生的对象(以伪数组形式存储!!!)。

jQuery获取对象的方式 $(""),即可直接获取对象(和DOM对象不一样)。

注意: jQuery对象只能使用jQuery的属性和方法(不能使用style),而DOM对象则使用原生js的属性和方法!!!

jQuery对象和DOM对象可以相互转化
DOM对象转换为jQuery对象     语法规范: $(DOM对象) 
jQuery对象转化为DOM对象     语法规范: $(对象名)[index] / $(对象名).get(index)  index表示对象在伪数组里面的索引号

注意: jQuery没有play这个方法。


jQuery入口函数: $(function() {
    代码;
}) 



jQuery常用的API

jQuery选择器
$("选择器") 选择器为css选择器(css则怎么写,这里面就怎么写),使用方法同querySelector("")。
同样,选择器中还可以包含结构伪类选择器,如:
$("li:first") 获取第一个li元素
$("li:last") 获取最后一个li元素
$("li:eq(n)") 获取第n+1个li元素
$("li:odd") 获取索引号(和数组一样)为奇数的li元素
$("li:even") 获取索引号(和数组一样)为偶数的li元素

在表单中,jQuery还提供了其他的选择器,如 :checked(查找被选中的表单元素)。


jQuery筛选方法(返回的都是伪数组!!!)
parent() 查找父级
parents("选择器") 查找指定的祖先级元素(必须为父子关系)
children("选择器") 选出最近一级的子元素(亲儿子)
find("选择器") 后代选择器
siblings("选择器") 查找兄弟元素节点,不包括自己
nextAll() 查找当前元素之后的所有同辈元素,不包括自己
prevtAll() 查找当前元素之前的所有同辈元素,不包括自己

以下两个返回的不是伪数组
hasClass("类名") 检查当前的元素是否还有某个元素,如果有,则返回true
eq(index) 相当于$("li:eq(n)") (更推荐使用这种方法)


jQuery常用方法
index() 返回当前元素的索引号。


jQuery设置样式
语法规范: j对象.css("属性","值")
注意: 这样会直接将里面所有的元素都设置css。
这里使用到了隐式迭代,即会给匹配到的所有元素进行循环遍历,不需要我们手动循环,从而简化操作。


jQuery操作css
1. j对象.css("属性") 返回属性值(带有单位的字符串)

2. 以对象形式修改可以设置多组样式,其中属性名和属性值之间用 : 隔开,且属性可以不加引号。
语法规范: j对象.css({
    属性1: 值1,
    属性2: 值2,
    ...
})
注意: 这里的属性名必须按原生js的方法来(驼峰命名法),且若值不为数字型需要加引号!!!
left,top,width等不需要加引号,直接写数字!!!


3. 类操作方法(不会影响其他的类)
(1)添加类
语法规范: j对象.addClass("类名")

(2)移除类
语法规范: j对象.removeClass("类名")

(3)切换类 有则删除,无则添加
语法规范: j对象。toggleClass("类名")


jQuery绑定事件
语法规范: j对象(会有隐式迭代).事件名(function(){})
jQuery里面的this指针也要变为 $(this)。
注意: 事件名同事件监听方式,不加 on !!!

jQuery特有事件 hover([over], out) 事件切换
over: 鼠标经过元素就触发的函数(相当于mouseenter)
out: 鼠标离开时触发的函数(相当于mouseleave) 
注意: 如果只写一个参数,那么鼠标经过和离开都会触发该函数!!!


jQuery链式编程
如 $(this).css("color,"red").siblings().css("color","");
就相当于 $(this).css("color,"red");$(this)siblings().css("color","");
这样可以大大简化代码。
注意: 使用该方法时一定要明确操作的对象是什么,即之前指定的对象!!!  


jQuery中只需要使用siblings就可以直接实现排他思想。


jQuery效果
1. 显示隐藏 
(1) show([ 速度,[运动曲线],[回调函数] ]) 元素显示
速度: slow,normal,fast(前面都是字符串形式) 或者 表示动画时长的毫秒数值 
运动曲线: 默认为"swing" (慢 - 快 - 慢) ,可用参数"linear"(匀速)
回调函数: 在动画完成时执行的函数,每个元素执行一次。

(2) hide([ 速度,[运动曲线],[回调函数] ]) 元素隐藏
参数定义同上

(3)toggle([ 速度,[运动曲线],[回调函数] ]) 显示则隐藏,隐藏则显示
参数定义同上

一般以上函数里面不加参数,直接显示或隐藏(因为丑)。


2. 滑动
(1)slideDown([ 速度,[运动曲线],[回调函数] ]) 下拉滑动
参数定义同上
原先display: none;可以通过该方法直接显示出来。

(2)slideUp(参数同上) 上拉 
参数定义同上

(3)slideToggle(参数同上) 滑动切换,若不显示,则默认为上拉。
参数定义同上

一般里面也不跟参数。

3. 淡入淡出
(1)fadeIn([ 速度,[运动曲线],[回调函数] ]) 淡入
参数定义同上
原先display: none;可以通过该方法直接显示出来。

(2)fadeOut(参数同上) 淡出
参数定义同上

(3)fadeToggle(参数同上)  淡入淡出切换
参数定义同上

(4)fadeTo([[速度],透明度,[运动曲线],[回调函数] ]) 修改透明度,直接将元素的透明度修改为设定
透明度相当于opacity (取值 0-1 直接)。
其他参数定义同上

注意: 这里的透明度和速度必须写!!!


4. 自定义动画
animate(params, [speed], [easing], [fn])
params: 想要更改的样式属性,以对象的形式传递(重要!!!),必须写,同时含有一些jQuery属性,如scrollTop等。
属性名不带引号,类似于jQuery中修改多种css样式的写法,复合属性采取驼峰命名法。
其余参数同show()


注意: 动画或者效果一旦触发就会执行,如果多次触发就会造成多个动画或者效果排队执行。
解决方法: 停止排队 stop()
stop()用于停止动画或者效果,写到动画或者效果的前面(重要!!!),相当于停止结束上一次的动画。
语法规范: j对象.stop().动画效果;
谁做动画给谁加!!!



jQuery属性操作

固有属性,即元素自身所带有的属性,如<a>中的href,<input>里面的type

prop() 设置或获取元素的固有属性值
获取属性值      语法规范: j对象.prop("属性名")
设置属性值      语法规范: j对象.prop("属性名","属性值")


attr() 设置或获取元素的自定义属性值
获取属性值      语法规范: j对象.attr("属性名")
设置属性值      语法规范: j对象.attr("属性名","属性值")


data() 数据缓存
获取属性值      语法规范: j对象.data("属性名")
设置属性值      语法规范: j对象.data("属性名","属性值")
该方法可以在指定的元素上存储数据,并不会修改DOM元素结构。一旦页面刷新,之前存放的数据都会被删除。
注意: 这个里面的数据存放在元素的内存里面,即把元素当成了一个变量。
这个方法也可以读取h5中的自定义属性 data-... ,得到的类型为数字型(这里的属性名不需要写 data- !!!)。

上述返回的都是string型。


jQuery内容文本值
主要针对于元素的内容和表单的value。

1. html()    普通元素内容(相当于innerHTML)
获取元素内容    语法规范: html()
设置元素内容    语法规范: html("内容")

2. text()    普通文本内容(相当于innerText)
使用方式同上

3. val()     表单的值(相当于value)
使用方式同上



jQuery元素操作
主要是遍历,创建,添加,删除元素操作。


遍历元素
each()
语法规范1: j对象.each(function(index, domEle) {} )
里面的函数为回调函数,共有两个参数(都可以随便命名):
index为每个元素的索引号(相当于for循环的i),domEle是每个DOM元素对象(重要!!!),不是j对象!!!

语法规范2: $.each(对象名, function(index, ele) {})
注意: 这个可以遍历所有对象,而上面只能遍历j对象,ele为数据的内容(都可以随机命名)。
2的一般用法用于处理数据,比如数组,对象等。

注意: 以上的index都是从0开始。


创建元素
语法规范: $("<标签名>文本</标签名>")
这样就动态地创建了一个标签。


添加元素
(1) 内部添加
append() 放到匹配元素内部的最后面(类似于原生js中的appendChild)
语法规范: j对象.append(创建的j对象)

prepend() 则是添加到匹配元素内部的最前面(其他同append)

(2)外部添加
before() 放到指定元素的前面
语法规范: j对象.before(创建的j对象)

after() 放到指定元素的后面(其他同before)


删除元素
remove() 删除匹配的元素本身
语法规范: j对象.remove()

empty() 删除匹配的元素集合中所有的子节点
语法规范: j对象.empty()

html("") 清空元素的所有内容(等同于empty())
同html()的用法。



jQuery尺寸,位置操作

jQuery尺寸
width() / height() 获取匹配元素的宽度 / 高度,只算width / height。
innerWidth() / innerHeight() 获取匹配元素的宽度 / 高度,包含padding。
outerWidth() / outerHeight() 获取匹配元素的宽度 / 高度,包含padding,border。
outerWidth(true) / outerHeight(true) 获取匹配元素的宽度 / 高度,包含padding,border.margin。

语法规范； j对象.对应的方法()
上述()为空是返回对应的值(数字型),若参数为数字,则为设置其宽度 / 高度。
参数可以不写单位!!!


jQuery位置
(1)offset() 设置或获取元素偏移,返回的是一个对象!!!(具有top,left属性)
该方法设置或返回的是元素相对于文档的偏移坐标,跟父级没有关系。
可以在() 写上相应的参数(以对象的形式,如{top: 1 ,left: 1})来设置元素偏移

(2)position() 设置或获取元素偏移
该方法设置或返回的是元素相对于最近一级带有定位的父级的偏移坐标,返回的也是一个对象
注意: 该方法只能获取,不能设置。

(3)scrollTop() / scrollLeft() 设置或获取元素被卷去的头部和左侧
若小括号里为数值,则为设置其值。
返回顶部的缓动动画可以使用animate()来制作,因为其可以修改的样式属性包括scrollTop。

注意: 使页面滚动时,相应的j对象应该为 $("body, html")

若有两个事件同时对一个元素进行操作且可能同时触发时,我们需要添加一个互斥锁(也就是节流阀)。
简单来说,就是执行一个事件对元素的操作时,使另一个事件对该元素的操作失效,这样就可以避免bug。



jQuery事件

jQuery事件注册

单个事件注册
语法规范: j对象.事件(function() {})
注意；事件为不加on形,和事件监听方式一样。

on() 多个事件注册
on()可以给一个元素同时绑定多个事件
语法规范: j对象.on(events, [selector], fn)
events表示一个或多个用空格分隔的事件类型。
selector表示元素的子元素选择器(字符串形式)。
fn为事件处理程序。

若相同则可以这样写, $("div").on("click mouseout", function() {})

注意: 以对象的形式分别书写多个事件(事件处理程序不同)!!!
如 $('div').on({
    click: function() {},
    mouseout: function() {},
})

on()还可以给动态创建生成的元素添加事件,而原来的单个事件注册不可以。


off() 解绑事件
off()可以移除通过on()绑定的事件。
语法规范: j对象.off("events", [selector])
若参数为空,则会解绑该对象的所有事件。
若要解绑指定的事件,则将相应的事件写进去即可(不加on,以字符串的形式)!!!
若解绑的事件为事件委托的事件,只需将相应的子元素写进[selector]即可(字符串形式)。


one() 只会触发一次的事件
语法与on一致。


jQuery自动触发事件
trigger() / triggerHandler() 自动触发事件
语法规范1: j对象.trigger("events")
语法规范2: j对象.triggerHandler("events")
第二种方法不会触发元素的默认行为(如表单的获得光标时的光标闪烁)!!!


jQuery事件对象
和原生js基本一致。



jQuery的其他方法

jQuery拷贝对象
$.extend() 将某个对象拷贝到另一个对象中使用
语法规范: $.extend([deep], target, obj1...[objN])
deep为一个bool值,若为true则为深拷贝,默认为false。
target表示要拷贝的目标对象。
obj1表示要被拷贝的第一个对象(可以不止一个)

注意: 若目标对象中有着和被拷贝的对象一样的属性(包括复杂数据类型),则原来的属性会被覆盖掉(浅拷贝)。

若被拷贝的对象中有复杂数据类型,则浅拷贝只是将该数据类型中的地址复制到了目标对象中。
即浅拷贝只是将栈的数据拷贝了,若修改其中复杂数据类型中的值,另一个也会进行相应的改变。

若为深拷贝,目标对象中有着和被拷贝的对象一样的属性,简单数据类型会被覆盖,复杂数据类型具有的数据则是同则覆盖,异则添加。
且复杂数据类型的拷贝则会开辟一个新对象。


jQuery复制节点
clone() 将一系列对象克隆并产生一个新对象
语法规范: j对象.clone();


多库共存
由于多个库直接对于标识符的使用可能会相同,若一起使用会造成冲突。
使得jQuery和其他的js库可以同时存在,这样就是多库共存。

jQuery解决方案:
1. 将 $ 改为jQuery。

2. jQuery变量规定新的名称
语法规范: var 代替的名称 = $.noConflict();
这样,即可将代替的名称作为 jQuery或者$ 来使用。


jQuery插件
jQuery功能相对有限,想要实现更复杂的效果,可以借助jQuery插件。
注意: jQuery插件是依赖于jQuery来完成的,所以必须引入jQuery文件。

jQuery插件常用网站:
jQuery插件库: http://www.jq22.com/
jQuery之家: http://www.htmleaf.com/

插件使用的方法详见js.txt。

1. 图片懒加载技术(重要!!!)
也就是当页面滑动到可视区域时,再加载相应的图片(能够大大提升网页性能,减小服务器的负担)。
直接在插件网站寻找即可(手写会相当麻烦)!!!

2. 全屏滚动(fullpage.js) 类似于PPT的类型
github: https://github.com/alvarotrigo/fullPage.js
中文翻译: http://www.dowebok.com/demo/2014/77

3. Bootstrap里面的js插件(Bootstrap框架也是依赖于jQuery开发的!!!)
只需要按照插件的使用方法,去查找自己想要的效果即可。
所以在使用Bootstrap里面的js插件时需要先引用jQuery文件。


